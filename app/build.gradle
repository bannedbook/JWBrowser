import com.android.build.OutputFile
import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.github.ben-manes.versions'

def getCurrentFlavor() {
    String task = getGradle().getStartParameter().getTaskRequests().toString()
    Matcher matcher = Pattern.compile("(assemble|generate)\\w*(Release|Debug)").matcher(task)
    if (matcher.find()) return matcher.group(2).toLowerCase() else {
        println "Warning: No match found for $task"
        return "debug"
    }
}
android {
    compileSdkVersion project.targetSdkVersion
    archivesBaseName = "JWBrowser"
    defaultConfig {
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        versionName rootProject.versionName
        vectorDrawables.useSupportLibrary = true
    }

    sourceSets {
        jwproxy.setRoot('src/jwproxy')
        hxnews.setRoot('src/hxnews')
    }
    productFlavors {
        jwproxy {
            dimension "capabilities"
            buildConfigField "boolean", "FULL_VERSION", "Boolean.parseBoolean(\"true\")"
            buildConfigField "boolean", "STOP_UPDATE", "Boolean.parseBoolean(\"true\")"
            applicationId "jwproxy.browser.bnews"
            versionCode rootProject.versionCode
        }
        hxnews {
            dimension "capabilities"
            buildConfigField "boolean", "FULL_VERSION", "Boolean.parseBoolean(\"true\")"
            buildConfigField "boolean", "STOP_UPDATE", "Boolean.parseBoolean(\"true\")"
            applicationId "org.bnews.app"
            versionCode rootProject.versionCode
        }
    }

    buildTypes {
        debug {
            multiDexEnabled true
            minifyEnabled false
            shrinkResources false
            proguardFiles 'proguard-project.txt'
            testCoverageEnabled true
        }

        release {
            multiDexEnabled false
            minifyEnabled true
            shrinkResources true
            proguardFiles 'proguard-project.txt'
            testCoverageEnabled false

            ndk {
                abiFilters "arm64-v8a", "armeabi-v7a", "x86", "x86_64"
            }
        }
    }
    dexOptions {
        javaMaxHeapSize "6g"
    }


    flavorDimensions "capabilities"

    lintOptions {
        abortOnError true
    }

    packagingOptions {
        exclude '.readme'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    splits {
        abi {
            enable true
            universalApk true
        }
    }
}

dexcount {
    includeClasses = false
    includeFieldCount = false
    format = "tree"
    orderByMethodCount = true
    verbose = false
}

dependencies {
    implementation project(':core')
    // multidex debug
    debugImplementation 'androidx.multidex:multidex:2.0.1'

    // test dependencies
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.13.2'
    testImplementation 'org.mockito:mockito-core:3.0.0'
    testImplementation 'com.nhaarman:mockito-kotlin:1.6.0', {
        exclude group: 'org.jetbrains.kotlin'
    }
    testImplementation 'org.robolectric:robolectric:4.3'

    // support libraries
    implementation "androidx.palette:palette:1.0.0"
    implementation "androidx.annotation:annotation:1.1.0"
    implementation "androidx.vectordrawable:vectordrawable-animated:1.1.0"
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "com.google.android.material:material:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.0.0"
    implementation "androidx.core:core:1.1.0"
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation "androidx.fragment:fragment:1.1.0"
    implementation "androidx.drawerlayout:drawerlayout:1.0.0"

    // html parsing for reading mode
    implementation 'org.jsoup:jsoup:1.11.3'

    // file reading
    final def mezzanineVersion = '1.1.1'
    implementation "com.anthonycr.mezzanine:mezzanine:$mezzanineVersion"
    kapt "com.anthonycr.mezzanine:mezzanine-compiler:$mezzanineVersion"

    // dependency injection
    final def daggerVersion = '2.24'
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    compileOnly 'javax.annotation:jsr250-api:1.0'

    // view binding
    final def butterKnifeVersion = '10.1.0'
    implementation "com.jakewharton:butterknife:$butterKnifeVersion"
    kapt "com.jakewharton:butterknife-compiler:$butterKnifeVersion"

    // permissions
    implementation 'com.anthonycr.grant:permissions:1.1.2'

    // proxy support
    implementation 'net.i2p.android:client:0.9.42'
    implementation 'net.i2p.android:helper:0.9.5'

    implementation 'com.squareup.okhttp3:okhttp:3.12.3'

    // rx
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.12'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.4.0'

    // tor proxy
    final def netCipherVersion = '2.0.0-alpha1'
    implementation "info.guardianproject.netcipher:netcipher:$netCipherVersion"
    implementation "info.guardianproject.netcipher:netcipher-webkit:$netCipherVersion"

    implementation 'com.anthonycr.progress:animated-progress:1.0'

    // memory leak analysis
    final def leakCanaryVersion = '1.6.3'
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation 'androidx.core:core-ktx:1.2.0-alpha04'
    
    //firebase
    //implementation 'com.google.firebase:firebase-analytics:17.2.1'
    //implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    implementation 'com.google.android.gms:play-services-ads:19.1.0'
}

kapt {
    arguments {
        arg("mezzanine.projectPath", project.rootDir)
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = '1.8'
        kotlinOptions {
            freeCompilerArgs += ['-XXLanguage:+InlineClasses']
            freeCompilerArgs += ['-progressive']
        }
    }
}

ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, x86: 3, x86_64: 4]
if (getCurrentFlavor() == 'release') android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def offset = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
        if (offset != null) output.versionCodeOverride = variant.versionCode + offset
    }
}